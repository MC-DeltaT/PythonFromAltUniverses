"Modern Python From Alternate Universes"


Purpose:
    About modern Python techniques inspired by other languages.
    Don't tell people how to do stuff, just present ideas to inspire.


Topics:
    1 - Type hints for general static typing. The basics, numbers, containers, etc.
    2 - Dataclasses. Simple immutable types plus type hinting support. (Like C structs)
    3 - Parameterising things on types (like C++ templates or Java generics).
    4 - Function param specs? Type safe generic function wrappers (like C++ variadic templates)
    5 - Type var bounds (like Java/C# generics constraints).
    6 - Deduced self type (like C++ CRTP, or C++23 deduced this. Or Scala, OCaml, Rust self type).
    7 - Protocols (like C++ concepts/constraints. Or OCaml, Go structural subtyping).
    8 - Context managers [assertions, timers, scope guards?] (like C++ RAII)
    9 - Pattern matching for returning error values (like Erlang, Elixir).
